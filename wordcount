#!/usr/bin/env python
# -*- encoding: utf-8 -*- 

from __future__ import unicode_literals, print_function
import getopt, sys, codecs
from glob import glob
from itertools import *

# 统计字数
Eng_Dot = set("~!@#$%^&*()_+`-={}{}[]|\\:\";'<>?,./")
Ch_Dot = set("。，、；：？！…—·ˉ¨‘’“”々～‖∶＂＇｀｜〃〔〕〈〉《》「」『』．〖〗【】（）［］｛｝")
Blank_Ch = set(" 　\r\t\b")
Ch_LBound, Ch_UBound = 0x4e00, 0x9fa5
(Mask_None, Mask_Letter, Mask_Chinese, Mask_Eng_Dot, Mask_Ch_Dot, Mask_Digit,
    Mask_Blank, Mask_NewLine, Mask_NarrowChar, Mask_WideChar) = (0, 1, 2, 4, 8, 16, 32, 64, 128, 256)

def chmask(ch0):
    ch = ord(ch0)
    
    # 匹配基本字符
    if ord('0') <= ch <= ord('9'):
        return Mask_Digit
    if ((ord('A') <= ch <= ord('Z'))
            or (ord('a') <= ch <= ord('z'))):
        return Mask_Letter
    if (ch0 == '\n'):
        return Mask_NewLine
    if (ch0 in Blank_Ch):
        return Mask_Blank
    if (ch0 in Eng_Dot):
        return Mask_Eng_Dot
    if (ch0 in Ch_Dot):
        return Mask_Ch_Dot

    # 匹配通用字符
    if (ch < 256):
        return Mask_NarrowChar
    if (Ch_LBound <= ch <= Ch_UBound):
        return Mask_Chinese;

    return Mask_WideChar
        
def getcontent(codec, filename):
    try:
        with codecs.open(filename, 'r', codec) as f:
            return f.read()
    except Exception as e:
        print (e)

def countwords(codec, files, readstd):
    ret = [0] * 9
    
    # 匹配通配符
    files = chain(*[glob(f) for f in files])
    
    # 统计文件内容
    def countcnt(cnt):
        (lnCount, paCount, chCount, cnCount, enCount, cnWord,
               enWord, enDot, cnDot) = (0, 0, 0, 0, 0, 0, 0, 0, 0)
               
        if cnt is None:
            return (lnCount, paCount, chCount, cnCount, enCount, cnWord,
               enWord, enDot, cnDot)
        
        continues_newline = 2
        continues_enchars = 0
        
        for ch in cnt:
            mask = chmask(ch)
            
            if mask == Mask_NewLine:
                continues_newline += 1
            elif mask == Mask_Blank:
                pass
            else:
                if (continues_newline > 1):
                    paCount += 1
                continues_newline = 0
                
            if (mask == Mask_Digit or mask == Mask_Letter):
                continues_enchars += 1
            else:
                if (continues_enchars > 0):
                    enWord += 1
                continues_enchars = 0
            
            if (mask == Mask_Letter or mask == Mask_Digit):
                enCount += 1
            elif (mask == Mask_Chinese):
                cnCount += 1
                cnWord += 1
            elif (mask == Mask_Eng_Dot):
                enDot += 1
            elif (mask == Mask_Ch_Dot):
                cnDot += 1
            elif (mask == Mask_NewLine):
                lnCount += 1
            chCount += 1
            
        if (continues_enchars > 0):
            enWord += 1
            
        if (continues_newline == 0):
            lnCount += 1
            
        return (lnCount, paCount, chCount, cnCount, enCount, cnWord,
                enWord, enDot, cnDot)
                
    def append_ret(ret, ret0):
        for i in range(0, len(ret)):
            ret[i] += ret0[i]
    
    # 循环统计每一个文件
    if readstd:
        append_ret(ret, countcnt(unicode(sys.stdin.read(), codec)))

    for f in files:
        cnt = getcontent(codec, f)
        append_ret(ret, countcnt(cnt))

    return ret

# 显示帮助
def usage():
    print ('wordcount.py -c | --codec ENCODING [--stdin] [files ...]')

# 主调函数
def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hc:v", ["help", "codec=", "stdin"])
    except getopt.GetoptError, err:
        print (str(err))
        usage()
        sys.exit(2)
    codec = 'utf-8'
    verbose = False
    readstd = False
    for o, a in opts:
        if o == "-v":
            verbose = True
        elif o in ("-h", "--help"):
            usage()
            sys.exit()
        elif o in ("-c", "--codec"):
            codec = a
        elif o == '--stdin':
            readstd = True
        else:
            assert False, "unhandled option"
    try:
        s = unicode(b'', codec)
    except Exception:
        print ("未知的字符编码 %s。" % codec)
        sys.exit(3)
    result = countwords(codec, args, readstd)
    result = [unicode(str(s), 'utf-8') for s in (
            result[5]+result[6]+(result[7]+result[8])*0.1,  # 总字数
            result[5]+result[8]*0.1, result[5], result[8],  # 中文字符(+中文标点)
            result[6]+result[7]*0.1, result[6], result[7],  # 英文词数(+英文标点)
            result[0],                                      # 行数
            result[1],                                      # 段落数
            result[2],                                      # 字符数
            result[3],                                      # 中文字符
            result[4],                                      # 英文字符
            result[7]+result[8],                            # 标点符号
        )]
    def padalign(a, b, left_or_right = 'left'):
        proc = {'left'  : lambda x,m: ' '*(m-len(x))+x,
                'right' : lambda x,m: x+' '*(m-len(x)) }
        t = max(len(result[a]), len(result[b]))
        proc = proc[left_or_right]
        fp = lambda x: proc(x, t)
        result[a], result[b] = fp(result[a]), fp(result[b])
    
    padalign(1, 4, 'right')
    padalign(2, 5, 'right')
    result = tuple(result)
    
    print  (
            "总 字 数: %s\n"
            "中文字数: %s (=%s+0.1*%s)\n"
            "英文词数: %s (=%s+0.1*%s)\n"
            "行    数: %s\n"
            "段 落 数: %s\n"
            "字 符 数: %s\n"
            "中文字符: %s\n"
            "英文字符: %s\n"
            "标点符号: %s" % result
            )
            
if __name__ == "__main__":
    main()

